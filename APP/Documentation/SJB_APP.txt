=============================================================================
List of generated methods in project: SJB_APP

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "Timer_1ms" (component TimerInt)
   - Timer_1ms_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - Timer_1ms_Disable -This method disables the component - it stops the timer. No events will be generated.

Module "ADC"       (component ADC)
   - ADC_Enable -Enables A/D converter component. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, this 
                method switches on A/D converter device, voltage reference, etc.
   - ADC_Disable -Disables A/D converter component. No <events> will be generated. If possible, this method switches off A/D 
                converter device, voltage reference, etc.
   - ADC_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - ADC_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this method 
                returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is less than 
                16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "SPI"       (component SynchroMaster)
   - SPI_Enable -Enable the component - it starts send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent"). This method cannot be disabled if the Fault mode is enabled. It's intended for 
                re-enabling the module if fault occurred. For more information please see the <"Fault mode" >property .
   - SPI_Disable -Disable the component - it stops the send and receive functions. No events will be generated. Note: When this 
                method is called while a transmission is in progress, the data being transmitted/received may be lost.
   - SPI_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data).   For information about SW overrun behavior please see <General info page>.
   - SPI_SendChar -Sends one character to the channel.
   - SPI_GetCharsInRxBuf -Returns the number of characters in the input buffer.  Note: If the Interrupt service is disabled, 
                and the Ignore empty character is set to yes, and a character has been received, then this method returns 1 
                although it was an empty character.
   - SPI_GetCharsInTxBuf -Returns the number of characters in the output buffer.
   - SPI_SetShiftClockPolarity -Sets the shift clock polarity at runtime. Output data will be shifted on the selected edge 
                polarity. The method will disable communication (if enabled), change the shift clock polarity end re-enable the 
                communication (if it was enabled before).
   - SPI_SetIdleClockPolarity -Sets the idle clock polarity at runtime. If the communication does not run, the clock signal 
                will have required level. The method will disable communication (if enabled), change the idle clock polarity 
                end re-enable the communication (if it was enabled before).

Module "CANComm"   (component FreescaleCAN)
   - CANComm_Enable -Enables the component - it turns on the send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent").
   - CANComm_Disable -Disables the component - it stops the send and receive functions. No events will be generated.
   - CANComm_SetAcceptanceCode -Sets the acceptance code registers. This method writes a code mask directly to the acceptance 
                code registers.
   - CANComm_SetAcceptanceMask -Sets the acceptance mask registers. This method writes an acceptance mask directly to the 
                acceptance mask registers.
   - CANComm_SetAcceptanceMode -Sets the acceptance mode register.
   - CANComm_SendFrame -Sends the frame via the CAN device. Using this method the user can send own message to the CAN bus. 
                This method allows to specify CAN buffer number, message ID, data to be sent and frame type 
                (DATA_FRAME/REMOTE_FRAME).
   - CANComm_ReadFrame -Reads a frame from the CAN device. The user is informed about CAN reception through OnFullRxBuffer 
                event or GetStateRX method.
   - CANComm_GetStateTX -Returns a value of the transmission complete flags.
   - CANComm_GetStateRX -Returns a value of the reception complete flag.
   - CANComm_GetError -Returns the content of the receiver flag register.
   - CANComm_SendFrameExt -Sends a frame. This method automatically selects a free transmit buffer for data transmission. The 
                user cannot specify a transmit buffer.

Module "CANPHY0"   (component Init_CANPHY_HCS12Z)
   - CANPHY0_Init -This method initializes registers of the CANPHY module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "BATS"      (component Init_BATS_VAR0)
   - BATS_Init -This method initializes registers of the BATS module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "RLY_CTL_WiperInterval" (component BitIO)
   - RLY_CTL_WiperInterval_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method 
                is available only if the direction = _[output]_ or _[input/output]_.
   - RLY_CTL_WiperInterval_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "RLY_CTL_RemoteControl" (component BitIO)
   - RLY_CTL_RemoteControl_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method 
                is available only if the direction = _[output]_ or _[input/output]_.
   - RLY_CTL_RemoteControl_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "RLY_CTL_CirculationPump" (component BitIO)
   - RLY_CTL_CirculationPump_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This 
                method is available only if the direction = _[output]_ or _[input/output]_.
   - RLY_CTL_CirculationPump_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "RLY_CTL_SolenoidPump" (component BitIO)
   - RLY_CTL_SolenoidPump_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method 
                is available only if the direction = _[output]_ or _[input/output]_.
   - RLY_CTL_SolenoidPump_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "RLY_CTL_Washer" (component BitIO)
   - RLY_CTL_Washer_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - RLY_CTL_Washer_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "RLY_CTL_WiperHighSpeed" (component BitIO)
   - RLY_CTL_WiperHighSpeed_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method 
                is available only if the direction = _[output]_ or _[input/output]_.
   - RLY_CTL_WiperHighSpeed_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "RLY_CTL_AutoPump" (component BitIO)
   - RLY_CTL_AutoPump_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - RLY_CTL_AutoPump_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "RLY_CTL_WiperLowSpeed" (component BitIO)
   - RLY_CTL_WiperLowSpeed_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method 
                is available only if the direction = _[output]_ or _[input/output]_.
   - RLY_CTL_WiperLowSpeed_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "RLY_CTL_ReadingLamp" (component BitIO)
   - RLY_CTL_ReadingLamp_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - RLY_CTL_ReadingLamp_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "TopLamp_DEN" (component BitIO)
   - TopLamp_DEN_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - TopLamp_DEN_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "TopLamp_CTL" (component BitIO)
   - TopLamp_CTL_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - TopLamp_CTL_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "WorkLamp_DEN" (component BitIO)
   - WorkLamp_DEN_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - WorkLamp_DEN_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "WorkLamp_CTL" (component BitIO)
   - WorkLamp_CTL_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - WorkLamp_CTL_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "MC33972_WAKE" (component BitIO)
   - MC33972_WAKE_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].

Module "MC33972_INT" (component BitIO)
   - MC33972_INT_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].

Module "MC33972_CS" (component BitIO)
   - MC33972_CS_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - MC33972_CS_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "CD1030_WAKE" (component BitIO)
   - CD1030_WAKE_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].

Module "CD1030_INT" (component BitIO)
   - CD1030_INT_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "CD1030_CS" (component BitIO)
   - CD1030_CS_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - CD1030_CS_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "Cpu"       (component MC9S12ZVC192_64)
   - Cpu_EnableInt -Enable maskable interrupts
   - Cpu_DisableInt -Disable maskable interrupts
   - Cpu_SetWaitMode -Set low power mode - Wait mode.   For more information about the wait mode see documentation of this CPU. 
                Release from Wait mode: Reset or interrupt
   - Cpu_SetStopMode -Set low power mode - Stop mode.   For more information about the stop mode see documentation of this CPU.
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. The method is independent on selected speed mode.

===================================================================================
